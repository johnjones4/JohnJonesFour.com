app: johnjonesfour-dot-com-2023
service: johnjonesfour-dot-com-2023

provider:
  name: aws
  runtime: go1.x
  stage: prod
  httpApi:
    payload: '1.0'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
          - "sns:Publish"
          Resource: "arn:aws:sns:*:*:contact"
        - Effect: Allow
          Action:
          - "sns:ListTopics"
          Resource: "*"
        - Effect: Allow
          Action:
          - "ses:SendEmail"
          Resource: "*"
        - Effect: Allow
          Action:
          - "logs:FilterLogEvents"
          Resource: "*"
  environment:
    NONCE_KEY: ${self:custom.conf.nonceKey}
    DOMAIN: ${self:custom.domainName}
    EMAIL: ${self:custom.conf.mailTo}

resources:
  Resources:
    Contact:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Contact"
        TopicName: contact
        Subscription:
          - Endpoint: ${self:custom.conf.mailTo}
            Protocol: "email"
    SiteS3Bucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:custom.domainName}
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref SiteS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: 
              Fn::Join:
                - ""
                - 
                  - 'arn:aws:s3:::'
                  - !Ref SiteS3Bucket
                  - '/*'
            Condition:
              StringEquals:
                AWS:SourceArn:
                  Fn::Join:
                    - ""
                    - 
                      - 'arn:aws:cloudfront::'
                      - !Ref AWS::AccountId
                      - ':distribution/'
                      - !Ref Distribution
    BackendPolicy:
      Type: AWS::CloudFront::OriginRequestPolicy
      Properties:
        OriginRequestPolicyConfig:
          Name: BackendPolicy
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - content-type
              - user-agent
              - referer
              - accept-language
          QueryStringsConfig:
            QueryStringBehavior: all
          CookiesConfig:
            CookieBehavior: whitelist
            Cookies:
              - jj4uid
              - jj4ses
    OriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig: 
          Name: ${self:custom.domainName}
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
    CFFunction:
      Type: AWS::CloudFront::Function
      Properties:
        AutoPublish: true
        FunctionCode: !Sub |
          function handler(event) {
            var request = event.request;
            var uri = request.uri;
            if (uri.endsWith('/')) {
                request.uri += 'index.html';
            }
            else if (!uri.includes('.')) {
                request.uri += '/index.html';
            }
            return request;
          }
        FunctionConfig: 
          Runtime: cloudfront-js-1.0
          Comment: Adds index to all requests
        Name: index_adder
    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domainName}
          Origins:
            - DomainName:
                Fn::Join:
                  - ""
                  - 
                    - !Ref SiteS3Bucket
                    - .s3.
                    - !Ref AWS::Region
                    - .amazonaws.com
              Id: s3ProductionBucketDirect
              OriginAccessControlId: !Ref OriginAccessControl 
              S3OriginConfig:
                OriginAccessIdentity:
            - DomainName: 
                Fn::Join:
                  - "."
                  - 
                    - !Ref HttpApi
                    - execute-api
                    - !Ref AWS::Region
                    - !Ref AWS::URLSuffix
              Id: apigateway
              OriginPath: /prod
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          Comment: Distribution
          DefaultRootObject: index.html
          CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            TargetOriginId: s3ProductionBucketDirect
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !Ref CFFunction
          CacheBehaviors:
            - AllowedMethods: 
                - HEAD
                - DELETE
                - POST
                - GET
                - OPTIONS
                - PUT
                - PATCH
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
              OriginRequestPolicyId: !Ref BackendPolicy
              ViewerProtocolPolicy: redirect-to-https
              TargetOriginId: apigateway
              PathPattern: action/*
          ViewerCertificate: 
            AcmCertificateArn: ${self:custom.conf.certArn}
            SslSupportMethod: sni-only

functions:
  all:
    handler: bin/fns
    package:
      include:
        - ./bin/fns
    events:
      - httpApi:
          path: '*'
          method: '*'

custom:
  conf: ${file(config.yml)}
  domainName: johnjonesfour.com
