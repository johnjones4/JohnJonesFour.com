app: johnjonesfour-dot-com
service: johnjonesfour-dot-com

provider:
  name: aws
  runtime: go1.x
  stage: prod
  profile: johnjonesfour
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
          - "sns:Publish"
          Resource: "arn:aws:sns:*:*:contact"
        - Effect: Allow
          Action:
          - "sns:ListTopics"
          Resource: "*"
  environment:
    NONCE_KEY: ${self:custom.conf.nonceKey}
    NONCE_IV: ${self:custom.conf.nonceIv}

resources:
  Resources:
    Contact:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Contact"
        TopicName: contact
        Subscription:
          - Endpoint: ${self:custom.conf.mailTo}
            Protocol: "email"
    SiteS3Bucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:custom.domainName}
    SiteS3BucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties: 
        Bucket: !Ref SiteS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement: 
          - 
            Action: 
              - "s3:GetObject"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
            Resource: 
              Fn::Join: 
                - ""
                - 
                  - !GetAtt SiteS3Bucket.Arn
                  - "/*"
    CloudFrontOriginIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'origin identity'
    BackendPolicy:
      Type: AWS::CloudFront::OriginRequestPolicy
      Properties:
        OriginRequestPolicyConfig:
          Name: BackendPolicy
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - content-type
              - user-agent
          QueryStringsConfig:
            QueryStringBehavior: all
          CookiesConfig:
            CookieBehavior: none
    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domainName}
          Origins:
            - DomainName: 
                Fn::Join:
                  - "."
                  - 
                    - ${self:custom.domainName}
                    - s3
                    - !Ref AWS::Region
                    - !Ref AWS::URLSuffix
              Id: s3ProductionBucket
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
            - DomainName: 
                Fn::Join:
                  - "."
                  - 
                    - !Ref ApiGatewayRestApi
                    - execute-api
                    - !Ref AWS::Region
                    - !Ref AWS::URLSuffix
              Id: apigateway
              OriginPath: /prod
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          Comment: Distribution
          DefaultRootObject: index.html
          CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            TargetOriginId: s3ProductionBucket
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            - AllowedMethods: 
                - HEAD
                - DELETE
                - POST
                - GET
                - OPTIONS
                - PUT
                - PATCH
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
              OriginRequestPolicyId: !Sub '${BackendPolicy}'
              ViewerProtocolPolicy: redirect-to-https
              TargetOriginId: apigateway
              PathPattern: api/*
          ViewerCertificate: 
            AcmCertificateArn: ${self:custom.conf.certArn}
            SslSupportMethod: sni-only

functions:
  contact:
    handler: bin/contact
    package:
      include:
        - ./bin/contact
    events:
      - http:
          path: /api/contact
          method: post
  get_nonce:
    handler: bin/get_nonce
    package:
      include:
        - ./bin/get_nonce
    events:
      - http:
          path: /api/get-nonce
          method: get

custom:
  conf: ${file(config.yml)}
  domainName: johnjonesfour.com
